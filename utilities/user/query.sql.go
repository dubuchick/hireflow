// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
UPDATE users
SET role_id = $1
WHERE id = $2
`

type AssignRoleToUserParams struct {
	RoleID pgtype.Int4
	ID     int32
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.RoleID, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    name, 
    email,
    password,
    role_id,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    CURRENT_TIMESTAMP
) RETURNING id, role_id, name, email, password, created_at
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
	RoleID   pgtype.Int4
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, role_id, name, email, password, created_at
FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, role_id, name, email, password, created_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
